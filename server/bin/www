#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket io.
 */

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log(`Listening on port ${port}`));
server.on('error', onError);
server.on('listening', onListening);




const io = require('socket.io')(server);

var relayState;

io.of('/arduino').on('connection', (socket) => {

  console.log(`New connection: ${socket.id}`);


  // io.emit('hello access', { for: 'everyone' });

  // socket.broadcast.emit('initial relay 1 state', relayState);

  socket.on('initial relay status', status => {
    console.log('SERVER initial relay status: ', status);
    relayState = status;
    socket.broadcast.emit('initial relay 1 state', status);
  });

  socket.on('change color', (color) => {
    // once we get a 'change color' event from one of our clients, we will send it to the rest of the clients
    // we make use of the socket.emit method again with the argument given to use from the callback function above
    console.log('Color Changed to: ', color);
    // io.sockets.emit('change color', color)
    socket.broadcast.emit('change color', color)
  });

  socket.on('led:on', number => {
    socket.broadcast.emit('led:on', number);
    console.log('Broadcasting: led:on', number);
  });

  socket.on('led:off', () => {
    socket.broadcast.emit('led:off');
    console.log('Broadcasting: led:off');
  });

  socket.on('relayOne:toggle', state => {
    console.log('Broadcasting: relay:toggle', state);
    socket.broadcast.emit('relayOne:toggle', state);
  });

  socket.on('relayTwo:toggle', state => {
    console.log('Broadcasting: relay2:toggle', state);
    socket.broadcast.emit('relayTwo:toggle', state);
  });

  console.log('server relay status:', relayState);

});
















/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
